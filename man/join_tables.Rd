% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/join_tables.R
\name{join_tables}
\alias{join_tables}
\title{Join the nested tables}
\usage{
join_tables(nested_tables, redcap_info = c("record_id", "center"))
}
\arguments{
\item{nested_tables}{(data.frame) the output from \link{nest_tables}}

\item{redcap_info}{(character) the names of the variables that
identify the subject and the site
where the subject was enrolled.}
}
\value{
\link[tibble:tibble-package]{tibble} a tibble with all the fields
of the study identified by
a unique column name.
}
\description{
The functions performs a multiple \code{left_join} of the output from
\link{nest_tables} using \link[plyr:join_all]{plyr::join_all}. The join is
performed using the IDs from the center and the subjects.
}
\details{
The functions has been implemented to create a unique
data.frame with all the fields included in the eCRF of the
study. The data.frame is built by performing a multiple
\code{left_join} of the output from \link{nest_tables} using
\link[plyr:join_all]{plyr::join_all}. Moreover, all the columns
are guaranteed to have a unique name by adding the union
of fields and sheets names as suffix.
}
\examples{

nested_tab <- tibble::tibble(
    fields = c(rep("demo_clinical", 3L), rep("follow_up", 3L)),
    sheets = c(
        "demo", "risk_factors", "clinical", "discharge",
        "month_1", "year_1"
    ),
    tables = purrr::map(
        .x = seq_len(6),
        ~ tibble::tibble(
            id = rep(glue::glue("id_{1:5}"), 2L),
            center = rep(c("center_1", "center_2"), each = 5L),
            x = c(0.1, 0.2, 0.15, 0.4, 0.5, 0.6, 0.3, 0.2, 0.2, 0.1),
            y = c(0.1, 0.11, 0.12, 0.3, 0.3, 0.3, 0.4, 0.5, 0.6, 0.55),
            z = c(0.1, 0.2, 0.15, 0.4, 0.5, 0.6, 0.3, 0.2, 0.2, 0.1)
        )
    )
)

join_tables(nested_tab, c("id", "center"))

}
